# 백준 1937번 욕심쟁이 판다

'''
n x n의 크기의 대나무 숲이 있다. 
욕심쟁이 판다는 어떤 지역에서 대나무를 먹기 시작한다. 
그리고 그 곳의 대나무를 다 먹어 치우면 
상, 하, 좌, 우 중 한 곳으로 이동을 한다. 
그리고 또 그곳에서 대나무를 먹는다. 그런데 단 조건이 있다. 
이 판다는 매우 욕심이 많아서 대나무를 먹고 자리를 옮기면 
그 옮긴 지역에 그 전 지역보다 대나무가 많이 있어야 한다.

이 판다의 사육사는 이런 판다를 대나무 숲에 풀어 놓아야 하는데, 
어떤 지점에 처음에 풀어 놓아야 하고, 어떤 곳으로 이동을 시켜야 
판다가 최대한 많은 칸을 방문할 수 있는지 고민에 빠져 있다. 
우리의 임무는 이 사육사를 도와주는 것이다. 
n x n 크기의 대나무 숲이 주어져 있을 때, 
이 판다가 최대한 많은 칸을 이동하려면 
어떤 경로를 통하여 움직여야 하는지 구하여라.

n(1 ≤ n ≤ 500)
첫째 줄에는 판다가 이동할 수 있는 칸의 수의 최댓값을 출력한다
[input]
4
14 9 12 10
1 11 5 4
7 15 2 13
6 3 16 8

[output]
4

DFS, DP?

먹는 양이 아니라 간 거리네
현재 칸에서 갈 수있는 칸의 갯수, 상하 좌우 중 어디로 갈 수 있는지?

'''
import pprint
dire = [(-1, 0), (1, 0), (0, -1), (0, 1)]   # 상하좌우

n = int(input())
soop = [list(map(int,input().split())) for _ in range(n)]
test =[[[0 for _ in range(5)] for _ in range(n)] for _ in range(n)]
for i in range(n):
    for j in range(n):
        for k in range(4):
            ny, nx = i + dire[k][0], j + dire[k][1]
            if 0 <= ny < n and  0 <= nx < n:
                if soop[i][j] > soop[ny][nx]:
                    test[i][j][0] += 1
                    test[i][j][k + 1] = 1

'''
[[[2, 0, 1, 0, 1], [0, 0, 0, 0, 0], [3, 0, 1, 1, 1], [1, 0, 1, 0, 0]],
[[0, 0, 0, 0, 0], [3, 1, 0, 1, 1], [2, 0, 1, 0, 1], [0, 0, 0, 0, 0]],
[[2, 1, 1, 0, 0], [4, 1, 1, 1, 1], [0, 0, 0, 0, 0], [3, 1, 1, 1, 0]],
[[1, 0, 0, 0, 1], [0, 0, 0, 0, 0], [3, 1, 0, 1, 1], [0, 0, 0, 0, 0]]]
'''
